<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | bibitiger的博客]]></title>
  <link href="http://blog.bibitiger.cn/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.bibitiger.cn/"/>
  <updated>2020-01-02T15:08:33+08:00</updated>
  <id>http://blog.bibitiger.cn/</id>
  <author>
    <name><![CDATA[bibitiger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PyQt中Thread的使用]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/05/09/use-thread-in-pyqt/"/>
    <updated>2017-05-09T19:36:40+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/05/09/use-thread-in-pyqt</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2017/05/09/use-thread-in-pyqt/">blog.bibitiger.cn/blog/2017/04/11/install-php71-mac/</a></h2>

<p><br/></p>

<hr />

<p>PyQt中的Thread通常使用QThread，这个个人感觉封装的很好，比如我经常喜欢这样使用C++的thread：</p>

<!--more-->


<pre><code>template&lt;typename O, typename I&gt;
class MYThread
{
public:
    MYThread()
    {
    }

    int start()
    {
        return pthread_create(&amp;_tid, NULL, _procedure, NULL);
    }

    int join()
    {
        return pthread_join(_tid, NULL);
    }

    int detach()
    {
        return pthread_detach(_tid);
    }

    static void * _procedure(void * _ptr_arg)
    {
        O::do_something_in_worker_thread();
        return NULL;
    }

private:
    pthread_t _tid;
};
</code></pre>

<p>我们再来看下，PyQt下的代码：</p>

<pre><code>class MyThread(QThread):
    def __init__(self, do_something_in_worker_thread, *args, parent=None):
        super(MyThread, self).__init__(parent)
        self._func = do_something_in_worker_thread
        self._args = args

    def run(self):
        result = self. _func(*self._args)
</code></pre>

<p>是不是发现很相似，而且有很多的代码都不需要重复的写，加上qt的signal，可以很方便的发出信号和其他线程通信就更方便了，改一下就成了这个样子：</p>

<pre><code>class MyThread(QThread):
    finishSignalList = pyqtSignal(list)
    finishSignalInt = pyqtSignal(int)

    def __init__(self, func, *args, parent=None):
        super(MyThread, self).__init__(parent)
        self._func = func
        self._args = args

    def run(self):
        result = self._func(*self._args)
        print(result)
        if isinstance(result, list):
            self.finishSignalList.emit(result)
        elif isinstance(result, int):
            self.finishSignalInt.emit(result)
</code></pre>

<p>在使用的时候也很方便：</p>

<pre><code>self.myTheard = MyThread(self.func, self.beginTime.dateTime().toPyDateTime(), self.endTime.dateTime().toPyDateTime())
self.myTheard.finishSignalList.connect(self.returnFunc)
self.myTheard.start()

def returnFunc(self, result):
    print(result)
</code></pre>

<p>如果在我们的func上加上输入输出的校验感觉就更完美了，这个在<a href="http://blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions/">Python中的注解“@”</a>里已经说过了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用QPainter创建等待动画在PyQt中]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/05/09/make-loading-animation-by-qpainter/"/>
    <updated>2017-05-09T19:35:24+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/05/09/make-loading-animation-by-qpainter</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2017/05/09/make-loading-animation-by-qpainter/">blog.bibitiger.cn/blog/2017/04/11/install-php71-mac/</a></h2>

<p><br/></p>

<hr />

<p>具体的代码和使用可查看<a href="https://github.com/bibitiger/testWaitProgress">github仓库</a></p>

<p>实现旋转动画还可以使用QGraphicsItemAnimation来实现，这个以后再说，今天说说用QPainter实现这个效果。</p>

<!--more-->


<h3>先看下效果</h3>

<p><img src="http://7xtz1f.com2.z0.glb.clouddn.com/image/qtProgress/ProgressGradient.gif-shuiyinBlack" alt="gradient" /></p>

<p>首先解决动画的问题，QPainter是Qt的绘画板，经常和PainterEvent混合使用，在页面重新渲染或者调用update等的情况下都会触发PainterEvent。在这个前提下，先创建一个我们自己的QWidget，这里需要注意的是必须给我们的QWidget设定最小size，否则在layout布局的时候会显示不出来。重写QWidget的<strong>init</strong>,我是这样做的：</p>

<pre><code>    def __init__(self, width, height, parent = None):
        super(MyRotateProgress, self).__init__(parent)
        self.setMinimumSize(width, height)
</code></pre>

<p>这一步作为我们先画出一个十个指针的圆形环绕图，这里我们重写paintEvent：</p>

<pre><code>    def paintEvent(self, QPaintEvent):
        super(MyRotateProgress, self).paintEvent(QPaintEvent)
        painter = QPainter(self)
        # 反走样，边缘平滑
        painter.setRenderHint(QPainter.Antialiasing, True)
        #radius取最小边长
        radius = self.width() if self.width() &lt; self.height() else self.height()
        if radius &lt;= 0:
            return
        radius = radius/6
        # 将圆等分为10份，分别画出10条线
        per = 360/10;
        # 将画板的焦点坐标放置到中心，这样我们的旋转将围绕中心来进行
        painter.translate(self.width()/2, self.height()/2)
        #将一个一个的直线画出
        for i in range(10):
              #记住当前画板状态
            painter.save()
            #设置画笔，Qpen(黑色，宽度三像素)
            painter.setPen(QPen(Qt.black, 3))
            #旋转
            painter.rotate(per*i)
            #划线
            painter.drawLine(QPoint(0, 0 + radius), QPoint(0, 0 + radius*2))
            #由于我们将画板旋转了角度，所以还原画板到上一次记忆的状态
            painter.restore()
</code></pre>

<p>好，现在我们已经画出了一个雏形了，接下来让他动起来就可以出效果了。那接着使用QTimer来计时，并且如前文所说在update的时候会触发paintEvent这个事件。那如下，就可以实现旋转了：</p>

<pre><code>from PyQt5.Qt import *

class MyRotateProgress(QWidget):
    PenStyleNormal = 0
    PenStyleGradient = 1
    PenstylePerGradient = 2

    def __init__(self, width, height, parent = None):
        super(MyRotateProgress, self).__init__(parent)
        self.setMinimumSize(width, height)
        self.now = 0;
        self._timer = QTimer(self)
        self._timer.timeout.connect(self.onTime)
        self._timer.start(150)
        self._PenStyle = MyRotateProgress.PenStyleNormal

    def onTime(self):
        self.now += 1
        self.now = 0 if self.now &gt;= 10 else self.now
        self.update()

    def paintEvent(self, QPaintEvent):
        super(MyRotateProgress, self).paintEvent(QPaintEvent)
        painter = QPainter(self)
        # 反走样，边缘平滑
        painter.setRenderHint(QPainter.Antialiasing, True)
        #radius取最小边长
        radius = self.width() if self.width() &lt; self.height() else self.height()
        if radius &lt;= 0:
            return
        radius = radius/6
        # 将圆等分为10份，分别画出10条线
        per = 360/10;
        # painter.setPen(QPen(Qt.white, 3))
        painter.translate(self.width()/2, self.height()/2)
        # painter.rotate(per)
        # painter.drawLine(QPoint(0, 0 + radius), QPoint(0, 0 + radius*2))
        print('get pen begin')
        for i in range(10):
            painter.save()
            # self.getPenStyle(self._PenStyle, i)
            painter.setPen(self.getPenStyle(self._PenStyle, i))
            # painter.translate(self.width()/2, self.height()/2)
            painter.rotate(per*i)
            painter.drawLine(QPoint(0, 0 + radius), QPoint(0, 0 + radius*2))
            painter.restore()

    def getPenStyle(self, PenStyle, PenPoint):
        radius = self.width() if self.width() &lt; self.height() else self.height()
        if radius &lt;= 0:
            return
        radius = radius / 6

        if PenStyle == MyRotateProgress.PenStyleNormal:
            if PenPoint == self.now:
                return QPen(Qt.white, 3)
            else:
                return QPen(Qt.black, 3)
        elif PenStyle == MyRotateProgress.PenStyleGradient:
            point = PenPoint-self.now if PenPoint-self.now &gt;= 0 else 10+PenPoint-self.now
            print('{}:{}'.format('self.now',self.now))
            print('{}:{}'.format('PenPoint', PenPoint))
            print(point)
            return QPen(QColor(255*point/10, 255*point/10,255*point/10), 3)
        elif PenStyle == MyRotateProgress.PenstylePerGradient:
            if PenPoint == self.now:
                gradient = QRadialGradient(0,radius, radius, 0, radius)
                gradient.setColorAt(0.2,Qt.white)
                gradient.setColorAt(0.6,Qt.gray)
                return QPen(gradient, 3)
            else:
                gradient = QRadialGradient(0,radius, radius, 0, radius)
                gradient.setColorAt(0.2,Qt.gray)
                gradient.setColorAt(0.6,Qt.black)
                return QPen(gradient, 3)

    def closeEvent(self, QCloseEvent):
        print('timer close')
        if self._timer.isActive():
            self._timer.stop()

    def hideEvent(self, QHideEvent):
        print('timer hide')
        if self._timer.isActive():
            self._timer.stop()

    def showEvent(self, QShowEvent):
        print('timer show')
        if self._timer.isActive() != True:
            self._timer.start()

    @property
    def PenStyle(self):
        return self._PenStyle

    @PenStyle.setter
    def PenStyle(self, Value):
        self._PenStyle = Value
        self.update()
</code></pre>

<p>当然我们用的使用不能就这样用，既然我们是等待和loading的动画，那模板和提示字是不可避免的，这时候我们就需要用到QDialog了，我们需要重写QDialog，并且把他的尺寸设定为目标窗口的大小，并且进行排版，废话不多说，直接上代码：</p>

<pre><code>from PyQt5.Qt import *
import  MyRotateProgress

class MyWaitProgressDialog(QDialog):
    '''MyWaitProgressDialog(string,QWidget)'''

    def __init__(self, value, targetWindow):
        super(MyWaitProgressDialog, self).__init__()
        self.decTile = QLabel()
        #设置为居中
        self.decTile.setAlignment(Qt.AlignHCenter)
        self.Dec = value
        self._targetWindow = targetWindow
        self._rotate = MyRotateProgress.MyRotateProgress(80,80)
        self._rotate.PenStyle = MyRotateProgress.MyRotateProgress.PenStyleGradient
        # self._rotate.setParent(self)
        # palette = QPalette(Qt.gray)
        self._rotate.setAutoFillBackground(True)
        # self._rotate.setPalette(palette)
        vbox = QVBoxLayout()
        #设置为居中
        vbox.setAlignment(Qt.AlignHCenter)
        vbox.addStretch(1)
        vbox.addWidget(self._rotate)
        vbox.addWidget(self.decTile)
        vbox.addStretch(1)
        hbox = QHBoxLayout()
        hbox.addStretch(1)
        hbox.addLayout(vbox)
        hbox.addStretch(1)

        # self.webview.resizeEvent().connect
        self._oldTargetFlags = self._targetWindow.windowFlags()
        # self._targetWindow.setWindowFlags( self._oldTargetFlags &amp; Qt.FramelessWindowHint)

        self.setLayout(hbox)
        #去掉标题栏
        self.setWindowFlags(Qt.Dialog | Qt.FramelessWindowHint)
        self.setGeometry(targetWindow.geometry())
        self.setWindowOpacity(0.8)

    @property
    def Dec(self):
        return self._dec

    @Dec.setter
    def Dec(self, value):
        assert isinstance(value, str), "webUrl value %r not match %s" (value, QUrl)
        self._dec = value
        self.decTile.setText(value)

    def closeEvent(self, QCloseEvent):
        print("closeEvernt")
        self._targetWindow.setWindowFlags(self._oldTargetFlags)

    def paintEvent(self, QPaintEvent):
        print('paint Event')
</code></pre>

<p>然后我们使用的时候用exec就是模态的了：</p>

<pre><code>self.progress = MyWaitProgressDialog('begin...',self)
        self.progress.exec()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中的注解“@”]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions/"/>
    <updated>2017-04-17T22:41:22+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions/">blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions/</a></h2>

<p><br/></p>

<hr />

<p>Python3.0之后加入新特性Decorators，以@为标记修饰function和class。有点类似c++的宏和java的注解。Decorators用以修饰约束function和class，分为带参数和不带参数，影响原有输出，例如类静态函数我们要表达的时候需要函数前面加上修饰@staticmethod或@classmethod,为什么这样做呢？下面用简单的例子来看一下，具体内容可以查看：<a href="http://www.python.org/dev/peps/pep-0318/">官方解释</a></p>

<!--more-->


<h3>不带参数的单一使用</h3>

<pre><code>def spamrun(fn):
    def sayspam(*args):
        print("spam,spam,spam")
        fn(*args)
    return sayspam
@spamrun
def useful(a,b):
    print(a*b)

if __name__ == "__main__"
    useful(2,5) 
</code></pre>

<p>运行结果</p>

<pre><code>spam,spam,spam
10
</code></pre>

<p>函数useful本身应该只是打印<code>10</code>，可是为什么最后的结果是这样的呢，其实我们可以简单的把这个代码理解为</p>

<pre><code>def spamrun(fn):
    def sayspam(*args):
        print("spam,spam,spam")
        fn(*args)
    return sayspam

def useful(a,b):
    print(a*b)

if __name__ == "__main__"
    useful = spamrun(useful)
    useful(a,b)
</code></pre>

<h3>不带参数的多次使用</h3>

<pre><code>def spamrun(fn):
    def sayspam(*args):
        print("spam,spam,spam")
        fn(*args)
    return sayspam


def spamrun1(fn):
    def sayspam1(*args):
        print("spam1,spam1,spam1")
        fn(*args)
    return sayspam1

@spamrun
@spamrun1
def useful(a,b):
    print(a*b)

if __name__ == "__main__"
    useful(2,5) 
</code></pre>

<p>运行结果</p>

<pre><code>spam,spam,spam
spam1,spam1,spam1
10
</code></pre>

<p>这个代码理解为</p>

<pre><code>if __name__ == "__main__"
    useful = spamrun1(spamrun(useful))
    useful(a,b)
</code></pre>

<h3>带参数的单次使用</h3>

<pre><code>def attrs(**kwds):
    def decorate(f):
        for k in kwds:
            setattr(f, k, kwds[k])
        return f

    return decorate


@attrs(versionadded="2.2",
       author="Guido van Rossum")
def mymethod(f):
    print(getattr(mymethod,'versionadded',0))
    print(getattr(mymethod,'author',0))
    print(f)

if __name__ == "__main__"
mymethod(2) 
</code></pre>

<p>运行结果</p>

<pre><code>2.2
Guido van Rossum
2
</code></pre>

<p>这个代码理解为</p>

<pre><code>if __name__ == "__main__"
    mymethod = attrs(versionadded="2.2",
        author="Guido van Rossum).(mymethod)
    mymethod(2)
</code></pre>

<h3>带参数的多次使用</h3>

<p>这次我们来看一个比较实际的例子，检查我们函数的输入输出是否符合我们的标准，比如我们希望的输入是（int，（int，float））输出是（int，float），这个例子在官网里有，但是在3.6版本中使用有些问题，这里进行了一些改动，如果要进一步了解可以看下functionTool。</p>

<pre><code>def accepts(*types):
    def check_accepts(f):
        def new_f(*args, **kwds):
            assert len(types) == (len(args) + len(kwds)), \
                "args cnt %d does not match %d" % (len(args) + len(kwds), len(types))
            for (a, t) in zip(args, types):
                assert isinstance(a, t), \
                    "arg %r does not match %s" % (a, t)
            return f(*args, **kwds)

        update_wrapper(new_f, f)
        return new_f

    return check_accepts


def returns(rtype):
    def check_returns(f):
        def new_f(*args, **kwds):
            result = f(*args, **kwds)
            assert isinstance(result, rtype), \
                "return value %r does not match %s" % (result, rtype)
            return result

        update_wrapper(new_f, f)
        return new_f

    return check_returns


@accepts(int, (int, float))
@returns((int, float))
def func(arg1, arg2):
    return arg1 * arg2  

if __name__ == "__main__"
    a = func(1, 'b')
    print(a)    
</code></pre>

<p>这里故意输入了错误的参数，所以运行结果将我们的断言打印了出来</p>

<pre><code>AssertionError: arg 'b' does not match (&lt;class 'int'&gt;, &lt;class 'float'&gt;)
</code></pre>

<p>这个代码理解为</p>

<pre><code>if __name__ == "__main__"
    func = accepts(int, (int, float)).(accepts((int, float)).(mymethod))
    a = func(1, 'b')
    print(a)
</code></pre>

<p>说到这里，大家不难看出其实我们可以使用Decorators做很多工作，简化代码，使逻辑更清晰等。还有更多的用法等着大家自己去挖掘了，这里只简单的介绍了针对函数的用法，其实还可以针对class使用，具体的大家自己看看官方介绍，结合这篇文档应该就不难理解了。</p>
]]></content>
  </entry>
  
</feed>
