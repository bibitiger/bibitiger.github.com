<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bibitiger的博客]]></title>
  <link href="http://blog.bibitiger.cn/atom.xml" rel="self"/>
  <link href="http://blog.bibitiger.cn/"/>
  <updated>2017-05-09T21:24:57+08:00</updated>
  <id>http://blog.bibitiger.cn/</id>
  <author>
    <name><![CDATA[bibitiger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-c扫描二维码和条形码]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/05/09/scanning-qrcode-barcode-image-oc/"/>
    <updated>2017-05-09T19:39:54+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/05/09/scanning-qrcode-barcode-image-oc</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyQt中Thread的使用]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/05/09/use-thread-in-pyqt/"/>
    <updated>2017-05-09T19:36:40+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/05/09/use-thread-in-pyqt</id>
    <content type="html"><![CDATA[<p>PyQt中的Thread通常使用QThread，这个个人感觉封装的很好，比如我经常喜欢这样使用C++的thread：</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>template&lt;typename O, typename I&gt;
</span><span class='line'>class MYThread
</span><span class='line'>{
</span><span class='line'>public:
</span><span class='line'>  MYThread()
</span><span class='line'>  {
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  int start()
</span><span class='line'>  {
</span><span class='line'>      return pthread_create(&_tid, NULL, _procedure, NULL);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  int join()
</span><span class='line'>  {
</span><span class='line'>      return pthread_join(_tid, NULL);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  int detach()
</span><span class='line'>  {
</span><span class='line'>      return pthread_detach(_tid);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  static void * _procedure(void * _ptr_arg)
</span><span class='line'>  {
</span><span class='line'>      O::do_something_in_worker_thread();
</span><span class='line'>      return NULL;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>private:
</span><span class='line'>  pthread_t _tid;
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>我们再来看下，PyQt下的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MyThread(QThread):
</span><span class='line'>    def __init__(self, do_something_in_worker_thread, *args, parent=None):
</span><span class='line'>        super(MyThread, self).__init__(parent)
</span><span class='line'>        self._func = do_something_in_worker_thread
</span><span class='line'>        self._args = args
</span><span class='line'>
</span><span class='line'>    def run(self):
</span><span class='line'>        result = self. _func(*self._args)</span></code></pre></td></tr></table></div></figure>


<p>是不是发现很相似，而且有很多的代码都不需要重复的写，加上qt的signal，可以很方便的发出信号和其他线程通信就更方便了，改一下就成了这个样子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MyThread(QThread):
</span><span class='line'>    finishSignalList = pyqtSignal(list)
</span><span class='line'>    finishSignalInt = pyqtSignal(int)
</span><span class='line'>
</span><span class='line'>    def __init__(self, func, *args, parent=None):
</span><span class='line'>        super(MyThread, self).__init__(parent)
</span><span class='line'>        self._func = func
</span><span class='line'>        self._args = args
</span><span class='line'>
</span><span class='line'>    def run(self):
</span><span class='line'>        result = self._func(*self._args)
</span><span class='line'>        print(result)
</span><span class='line'>        if isinstance(result, list):
</span><span class='line'>            self.finishSignalList.emit(result)
</span><span class='line'>        elif isinstance(result, int):
</span><span class='line'>            self.finishSignalInt.emit(result)</span></code></pre></td></tr></table></div></figure>


<p>在使用的时候也很方便：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.myTheard = MyThread(self.func, self.beginTime.dateTime().toPyDateTime(), self.endTime.dateTime().toPyDateTime())
</span><span class='line'>self.myTheard.finishSignalList.connect(self.returnFunc)
</span><span class='line'>self.myTheard.start()
</span><span class='line'>
</span><span class='line'>def returnFunc(self, result):
</span><span class='line'>  print(result)</span></code></pre></td></tr></table></div></figure>


<p>如果在我们的func上加上输入输出的校验感觉就更完美了，这个在<a href="blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions/">Python中的注解“@”</a>里已经说过了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用QPainter创建等待动画在PyQt中]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/05/09/make-loading-animation-by-qpainter/"/>
    <updated>2017-05-09T19:35:24+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/05/09/make-loading-animation-by-qpainter</id>
    <content type="html"><![CDATA[<p>具体的代码和使用可查看<a href="https://github.com/bibitiger/testWaitProgress">github仓库</a></p>

<p>实现旋转动画还可以使用QGraphicsItemAnimation来实现，这个以后再说，今天说说用QPainter实现这个效果。</p>

<!--more-->


<h3>先看下效果</h3>

<p><img src="http://7xtz1f.com2.z0.glb.clouddn.com/image/qtProgress/ProgressGradient.gif-shuiyinBlack" alt="gradient" /></p>

<p>首先解决动画的问题，QPainter是Qt的绘画板，经常和PainterEvent混合使用，在页面重新渲染或者调用update等的情况下都会触发PainterEvent。在这个前提下，先创建一个我们自己的QWidget，这里需要注意的是必须给我们的QWidget设定最小size，否则在layout布局的时候会显示不出来。重写QWidget的<strong>init</strong>,我是这样做的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def __init__(self, width, height, parent = None):
</span><span class='line'>    super(MyRotateProgress, self).__init__(parent)
</span><span class='line'>    self.setMinimumSize(width, height)</span></code></pre></td></tr></table></div></figure>


<p>这一步作为我们先画出一个十个指针的圆形环绕图，这里我们重写paintEvent：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def paintEvent(self, QPaintEvent):
</span><span class='line'>    super(MyRotateProgress, self).paintEvent(QPaintEvent)
</span><span class='line'>    painter = QPainter(self)
</span><span class='line'>    # 反走样，边缘平滑
</span><span class='line'>    painter.setRenderHint(QPainter.Antialiasing, True)
</span><span class='line'>    #radius取最小边长
</span><span class='line'>    radius = self.width() if self.width() &lt; self.height() else self.height()
</span><span class='line'>    if radius &lt;= 0:
</span><span class='line'>        return
</span><span class='line'>    radius = radius/6
</span><span class='line'>    # 将圆等分为10份，分别画出10条线
</span><span class='line'>    per = 360/10;
</span><span class='line'>    # 将画板的焦点坐标放置到中心，这样我们的旋转将围绕中心来进行
</span><span class='line'>    painter.translate(self.width()/2, self.height()/2)
</span><span class='line'>    #将一个一个的直线画出
</span><span class='line'>    for i in range(10):
</span><span class='line'>        #记住当前画板状态
</span><span class='line'>        painter.save()
</span><span class='line'>        #设置画笔，Qpen(黑色，宽度三像素)
</span><span class='line'>        painter.setPen(QPen(Qt.black, 3))
</span><span class='line'>        #旋转
</span><span class='line'>        painter.rotate(per*i)
</span><span class='line'>        #划线
</span><span class='line'>        painter.drawLine(QPoint(0, 0 + radius), QPoint(0, 0 + radius*2))
</span><span class='line'>        #由于我们将画板旋转了角度，所以还原画板到上一次记忆的状态
</span><span class='line'>        painter.restore()</span></code></pre></td></tr></table></div></figure>


<p>好，现在我们已经画出了一个雏形了，接下来让他动起来就可以出效果了。那接着使用QTimer来计时，并且如前文所说在update的时候会触发paintEvent这个事件。那如下，就可以实现旋转了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from PyQt5.Qt import *
</span><span class='line'>
</span><span class='line'>class MyRotateProgress(QWidget):
</span><span class='line'>    PenStyleNormal = 0
</span><span class='line'>    PenStyleGradient = 1
</span><span class='line'>    PenstylePerGradient = 2
</span><span class='line'>
</span><span class='line'>    def __init__(self, width, height, parent = None):
</span><span class='line'>        super(MyRotateProgress, self).__init__(parent)
</span><span class='line'>        self.setMinimumSize(width, height)
</span><span class='line'>        self.now = 0;
</span><span class='line'>        self._timer = QTimer(self)
</span><span class='line'>        self._timer.timeout.connect(self.onTime)
</span><span class='line'>        self._timer.start(150)
</span><span class='line'>        self._PenStyle = MyRotateProgress.PenStyleNormal
</span><span class='line'>
</span><span class='line'>    def onTime(self):
</span><span class='line'>        self.now += 1
</span><span class='line'>        self.now = 0 if self.now &gt;= 10 else self.now
</span><span class='line'>        self.update()
</span><span class='line'>
</span><span class='line'>    def paintEvent(self, QPaintEvent):
</span><span class='line'>        super(MyRotateProgress, self).paintEvent(QPaintEvent)
</span><span class='line'>        painter = QPainter(self)
</span><span class='line'>        # 反走样，边缘平滑
</span><span class='line'>        painter.setRenderHint(QPainter.Antialiasing, True)
</span><span class='line'>        #radius取最小边长
</span><span class='line'>        radius = self.width() if self.width() &lt; self.height() else self.height()
</span><span class='line'>        if radius &lt;= 0:
</span><span class='line'>            return
</span><span class='line'>        radius = radius/6
</span><span class='line'>        # 将圆等分为10份，分别画出10条线
</span><span class='line'>        per = 360/10;
</span><span class='line'>        # painter.setPen(QPen(Qt.white, 3))
</span><span class='line'>        painter.translate(self.width()/2, self.height()/2)
</span><span class='line'>        # painter.rotate(per)
</span><span class='line'>        # painter.drawLine(QPoint(0, 0 + radius), QPoint(0, 0 + radius*2))
</span><span class='line'>        print('get pen begin')
</span><span class='line'>        for i in range(10):
</span><span class='line'>            painter.save()
</span><span class='line'>            # self.getPenStyle(self._PenStyle, i)
</span><span class='line'>            painter.setPen(self.getPenStyle(self._PenStyle, i))
</span><span class='line'>            # painter.translate(self.width()/2, self.height()/2)
</span><span class='line'>            painter.rotate(per*i)
</span><span class='line'>            painter.drawLine(QPoint(0, 0 + radius), QPoint(0, 0 + radius*2))
</span><span class='line'>            painter.restore()
</span><span class='line'>
</span><span class='line'>    def getPenStyle(self, PenStyle, PenPoint):
</span><span class='line'>        radius = self.width() if self.width() &lt; self.height() else self.height()
</span><span class='line'>        if radius &lt;= 0:
</span><span class='line'>            return
</span><span class='line'>        radius = radius / 6
</span><span class='line'>
</span><span class='line'>        if PenStyle == MyRotateProgress.PenStyleNormal:
</span><span class='line'>            if PenPoint == self.now:
</span><span class='line'>                return QPen(Qt.white, 3)
</span><span class='line'>            else:
</span><span class='line'>                return QPen(Qt.black, 3)
</span><span class='line'>        elif PenStyle == MyRotateProgress.PenStyleGradient:
</span><span class='line'>            point = PenPoint-self.now if PenPoint-self.now &gt;= 0 else 10+PenPoint-self.now
</span><span class='line'>            print('{}:{}'.format('self.now',self.now))
</span><span class='line'>            print('{}:{}'.format('PenPoint', PenPoint))
</span><span class='line'>            print(point)
</span><span class='line'>            return QPen(QColor(255*point/10, 255*point/10,255*point/10), 3)
</span><span class='line'>        elif PenStyle == MyRotateProgress.PenstylePerGradient:
</span><span class='line'>            if PenPoint == self.now:
</span><span class='line'>                gradient = QRadialGradient(0,radius, radius, 0, radius)
</span><span class='line'>                gradient.setColorAt(0.2,Qt.white)
</span><span class='line'>                gradient.setColorAt(0.6,Qt.gray)
</span><span class='line'>                return QPen(gradient, 3)
</span><span class='line'>            else:
</span><span class='line'>                gradient = QRadialGradient(0,radius, radius, 0, radius)
</span><span class='line'>                gradient.setColorAt(0.2,Qt.gray)
</span><span class='line'>                gradient.setColorAt(0.6,Qt.black)
</span><span class='line'>                return QPen(gradient, 3)
</span><span class='line'>
</span><span class='line'>    def closeEvent(self, QCloseEvent):
</span><span class='line'>        print('timer close')
</span><span class='line'>        if self._timer.isActive():
</span><span class='line'>            self._timer.stop()
</span><span class='line'>
</span><span class='line'>    def hideEvent(self, QHideEvent):
</span><span class='line'>        print('timer hide')
</span><span class='line'>        if self._timer.isActive():
</span><span class='line'>            self._timer.stop()
</span><span class='line'>
</span><span class='line'>    def showEvent(self, QShowEvent):
</span><span class='line'>        print('timer show')
</span><span class='line'>        if self._timer.isActive() != True:
</span><span class='line'>            self._timer.start()
</span><span class='line'>
</span><span class='line'>    @property
</span><span class='line'>    def PenStyle(self):
</span><span class='line'>        return self._PenStyle
</span><span class='line'>
</span><span class='line'>    @PenStyle.setter
</span><span class='line'>    def PenStyle(self, Value):
</span><span class='line'>        self._PenStyle = Value
</span><span class='line'>        self.update()</span></code></pre></td></tr></table></div></figure>


<p>当然我们用的使用不能就这样用，既然我们是等待和loading的动画，那模板和提示字是不可避免的，这时候我们就需要用到QDialog了，我们需要重写QDialog，并且把他的尺寸设定为目标窗口的大小，并且进行排版，废话不多说，直接上代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from PyQt5.Qt import *
</span><span class='line'>import  MyRotateProgress
</span><span class='line'>
</span><span class='line'>class MyWaitProgressDialog(QDialog):
</span><span class='line'>    '''MyWaitProgressDialog(string,QWidget)'''
</span><span class='line'>
</span><span class='line'>    def __init__(self, value, targetWindow):
</span><span class='line'>        super(MyWaitProgressDialog, self).__init__()
</span><span class='line'>        self.decTile = QLabel()
</span><span class='line'>        #设置为居中
</span><span class='line'>        self.decTile.setAlignment(Qt.AlignHCenter)
</span><span class='line'>        self.Dec = value
</span><span class='line'>        self._targetWindow = targetWindow
</span><span class='line'>        self._rotate = MyRotateProgress.MyRotateProgress(80,80)
</span><span class='line'>        self._rotate.PenStyle = MyRotateProgress.MyRotateProgress.PenStyleGradient
</span><span class='line'>        # self._rotate.setParent(self)
</span><span class='line'>        # palette = QPalette(Qt.gray)
</span><span class='line'>        self._rotate.setAutoFillBackground(True)
</span><span class='line'>        # self._rotate.setPalette(palette)
</span><span class='line'>        vbox = QVBoxLayout()
</span><span class='line'>        #设置为居中
</span><span class='line'>        vbox.setAlignment(Qt.AlignHCenter)
</span><span class='line'>        vbox.addStretch(1)
</span><span class='line'>        vbox.addWidget(self._rotate)
</span><span class='line'>        vbox.addWidget(self.decTile)
</span><span class='line'>        vbox.addStretch(1)
</span><span class='line'>        hbox = QHBoxLayout()
</span><span class='line'>        hbox.addStretch(1)
</span><span class='line'>        hbox.addLayout(vbox)
</span><span class='line'>        hbox.addStretch(1)
</span><span class='line'>
</span><span class='line'>        # self.webview.resizeEvent().connect
</span><span class='line'>        self._oldTargetFlags = self._targetWindow.windowFlags()
</span><span class='line'>        # self._targetWindow.setWindowFlags( self._oldTargetFlags & Qt.FramelessWindowHint)
</span><span class='line'>
</span><span class='line'>        self.setLayout(hbox)
</span><span class='line'>        #去掉标题栏
</span><span class='line'>        self.setWindowFlags(Qt.Dialog | Qt.FramelessWindowHint)
</span><span class='line'>        self.setGeometry(targetWindow.geometry())
</span><span class='line'>        self.setWindowOpacity(0.8)
</span><span class='line'>
</span><span class='line'>    @property
</span><span class='line'>    def Dec(self):
</span><span class='line'>        return self._dec
</span><span class='line'>
</span><span class='line'>    @Dec.setter
</span><span class='line'>    def Dec(self, value):
</span><span class='line'>        assert isinstance(value, str), "webUrl value %r not match %s" (value, QUrl)
</span><span class='line'>        self._dec = value
</span><span class='line'>        self.decTile.setText(value)
</span><span class='line'>
</span><span class='line'>    def closeEvent(self, QCloseEvent):
</span><span class='line'>        print("closeEvernt")
</span><span class='line'>        self._targetWindow.setWindowFlags(self._oldTargetFlags)
</span><span class='line'>
</span><span class='line'>    def paintEvent(self, QPaintEvent):
</span><span class='line'>        print('paint Event')</span></code></pre></td></tr></table></div></figure>


<p>然后我们使用的时候用exec就是模态的了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.progress = MyWaitProgressDialog('begin...',self)
</span><span class='line'>        self.progress.exec()</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中的注解“@”]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions/"/>
    <updated>2017-04-17T22:41:22+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions/">blog.bibitiger.cn/blog/2017/04/17/pythondecoratorsforfunctions/</a></h2>

<p><br/></p>

<hr />

<p>Python3.0之后加入新特性Decorators，以@为标记修饰function和class。有点类似c++的宏和java的注解。Decorators用以修饰约束function和class，分为带参数和不带参数，影响原有输出，例如类静态函数我们要表达的时候需要函数前面加上修饰@staticmethod或@classmethod,为什么这样做呢？下面用简单的例子来看一下，具体内容可以查看：<a href="http://www.python.org/dev/peps/pep-0318/">官方解释</a></p>

<!--more-->


<h3>不带参数的单一使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def spamrun(fn):
</span><span class='line'>    def sayspam(*args):
</span><span class='line'>        print("spam,spam,spam")
</span><span class='line'>        fn(*args)
</span><span class='line'>    return sayspam
</span><span class='line'>@spamrun
</span><span class='line'>def useful(a,b):
</span><span class='line'>    print(a*b)
</span><span class='line'>   
</span><span class='line'>if __name__ == "__main__"
</span><span class='line'>  useful(2,5) </span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spam,spam,spam
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<p>函数useful本身应该只是打印<code>10</code>，可是为什么最后的结果是这样的呢，其实我们可以简单的把这个代码理解为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def spamrun(fn):
</span><span class='line'>    def sayspam(*args):
</span><span class='line'>        print("spam,spam,spam")
</span><span class='line'>        fn(*args)
</span><span class='line'>    return sayspam
</span><span class='line'>    
</span><span class='line'>def useful(a,b):
</span><span class='line'>    print(a*b)
</span><span class='line'>   
</span><span class='line'>if __name__ == "__main__"
</span><span class='line'>  useful = spamrun(useful)
</span><span class='line'>  useful(a,b)</span></code></pre></td></tr></table></div></figure>


<h3>不带参数的多次使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def spamrun(fn):
</span><span class='line'>    def sayspam(*args):
</span><span class='line'>        print("spam,spam,spam")
</span><span class='line'>        fn(*args)
</span><span class='line'>    return sayspam
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def spamrun1(fn):
</span><span class='line'>    def sayspam1(*args):
</span><span class='line'>        print("spam1,spam1,spam1")
</span><span class='line'>        fn(*args)
</span><span class='line'>    return sayspam1
</span><span class='line'>        
</span><span class='line'>@spamrun
</span><span class='line'>@spamrun1
</span><span class='line'>def useful(a,b):
</span><span class='line'>    print(a*b)
</span><span class='line'>   
</span><span class='line'>if __name__ == "__main__"
</span><span class='line'>  useful(2,5) </span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spam,spam,spam
</span><span class='line'>spam1,spam1,spam1
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<p>这个代码理解为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if __name__ == "__main__"
</span><span class='line'>  useful = spamrun1(spamrun(useful))
</span><span class='line'>  useful(a,b)</span></code></pre></td></tr></table></div></figure>


<h3>带参数的单次使用</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def attrs(**kwds):
</span><span class='line'>    def decorate(f):
</span><span class='line'>        for k in kwds:
</span><span class='line'>            setattr(f, k, kwds[k])
</span><span class='line'>        return f
</span><span class='line'>
</span><span class='line'>    return decorate
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@attrs(versionadded="2.2",
</span><span class='line'>       author="Guido van Rossum")
</span><span class='line'>def mymethod(f):
</span><span class='line'>    print(getattr(mymethod,'versionadded',0))
</span><span class='line'>    print(getattr(mymethod,'author',0))
</span><span class='line'>    print(f)
</span><span class='line'>   
</span><span class='line'>if __name__ == "__main__"
</span><span class='line'>mymethod(2)   </span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2.2
</span><span class='line'>Guido van Rossum
</span><span class='line'>2</span></code></pre></td></tr></table></div></figure>


<p>这个代码理解为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if __name__ == "__main__"
</span><span class='line'>  mymethod = attrs(versionadded="2.2",
</span><span class='line'>          author="Guido van Rossum).(mymethod)
</span><span class='line'>  mymethod(2)</span></code></pre></td></tr></table></div></figure>


<h3>带参数的多次使用</h3>

<p>这次我们来看一个比较实际的例子，检查我们函数的输入输出是否符合我们的标准，比如我们希望的输入是（int，（int，float））输出是（int，float），这个例子在官网里有，但是在3.6版本中使用有些问题，这里进行了一些改动，如果要进一步了解可以看下functionTool。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def accepts(*types):
</span><span class='line'>    def check_accepts(f):
</span><span class='line'>        def new_f(*args, **kwds):
</span><span class='line'>            assert len(types) == (len(args) + len(kwds)), \
</span><span class='line'>                "args cnt %d does not match %d" % (len(args) + len(kwds), len(types))
</span><span class='line'>            for (a, t) in zip(args, types):
</span><span class='line'>                assert isinstance(a, t), \
</span><span class='line'>                    "arg %r does not match %s" % (a, t)
</span><span class='line'>            return f(*args, **kwds)
</span><span class='line'>
</span><span class='line'>        update_wrapper(new_f, f)
</span><span class='line'>        return new_f
</span><span class='line'>
</span><span class='line'>    return check_accepts
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def returns(rtype):
</span><span class='line'>    def check_returns(f):
</span><span class='line'>        def new_f(*args, **kwds):
</span><span class='line'>            result = f(*args, **kwds)
</span><span class='line'>            assert isinstance(result, rtype), \
</span><span class='line'>                "return value %r does not match %s" % (result, rtype)
</span><span class='line'>            return result
</span><span class='line'>
</span><span class='line'>        update_wrapper(new_f, f)
</span><span class='line'>        return new_f
</span><span class='line'>
</span><span class='line'>    return check_returns
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>@accepts(int, (int, float))
</span><span class='line'>@returns((int, float))
</span><span class='line'>def func(arg1, arg2):
</span><span class='line'>    return arg1 * arg2    
</span><span class='line'>    
</span><span class='line'>if __name__ == "__main__"
</span><span class='line'>  a = func(1, 'b')
</span><span class='line'>  print(a)    </span></code></pre></td></tr></table></div></figure>


<p>这里故意输入了错误的参数，所以运行结果将我们的断言打印了出来</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AssertionError: arg 'b' does not match (&lt;class 'int'&gt;, &lt;class 'float'&gt;)</span></code></pre></td></tr></table></div></figure>


<p>这个代码理解为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if __name__ == "__main__"
</span><span class='line'>  func = accepts(int, (int, float)).(accepts((int, float)).(mymethod))
</span><span class='line'>  a = func(1, 'b')
</span><span class='line'>  print(a)</span></code></pre></td></tr></table></div></figure>


<p>说到这里，大家不难看出其实我们可以使用Decorators做很多工作，简化代码，使逻辑更清晰等。还有更多的用法等着大家自己去挖掘了，这里只简单的介绍了针对函数的用法，其实还可以针对class使用，具体的大家自己看看官方介绍，结合这篇文档应该就不难理解了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在mac上安装php7.1]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/04/11/install-php71-mac/"/>
    <updated>2017-04-11T17:10:47+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/04/11/install-php71-mac</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2017/04/11/install-php71-mac/">blog.bibitiger.cn/blog/2017/04/11/install-php71-mac/</a></h2>

<p><br/></p>

<hr />

<p>mac上预装了PHP，但是版本是5.5.x，由于有的时候要用最新的版本，或者项目需要，我们需要不同版本的PHP经行开发。有多种办法可以搞定，比如说如果是团队开发，版本控制的话可以使用<strong><em>Vagrant</em></strong>虚拟机，这个之后再说，今天就简单的将mac上的PHP升级，以7.1版本为例，其实很简单。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s https://php-osx.liip.ch/install.sh | bash -s 7.1</span></code></pre></td></tr></table></div></figure>


<p>在终端里运行，时间可能会有点长，视个人网络情况而定。</p>

<!--more-->


<p>打开预处理文件<strong><em>~/.bash_profile</em></strong>,在最后加入环境变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=/usr/local/php5/bin:$PATH;</span></code></pre></td></tr></table></div></figure>


<p>让我们的配置生效就可以了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>现在我们查看版本就能看到我们的PHP已经升级到了7.1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  php -v
</span><span class='line'>PHP 7.1.1 (cli) (built: Feb 13 2017 10:05:49) ( NTS )
</span><span class='line'>Copyright (c) 1997-2017 The PHP Group
</span><span class='line'>Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies
</span><span class='line'>    with Zend OPcache v7.1.1, Copyright (c) 1999-2017, by Zend Technologies
</span><span class='line'>    with Xdebug v2.5.0, Copyright (c) 2002-2016, by Derick Rethans</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决github-pages无法被百度抓取问题（octopress）]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/02/23/duel-github-cant-for-baiduspiders/"/>
    <updated>2017-02-23T11:47:23+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/02/23/duel-github-cant-for-baiduspiders</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2017/02/23/duel-github-cant-for-baiduspiders/">http://blog.bibitiger.cn/blog/2017/02/23/duel-github-cant-for-baiduspiders/</a></h2>

<p><br></p>

<hr />

<p></br></p>

<p>网上已经有很多关于这个问题的解决方案,例如CDN到七牛等的镜像缓存、修改ip代理、云服务器等等，例如<a href="https://www.zhihu.com/question/30898326/answer/137735246">知乎上的问答“如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题？”</a>，在此就不一一复述了。直接说一个方便的解决方案。</p>

<!--more-->


<p>我在<a href="https://help.github.com/articles/what-is-github-pages/">github-page</a>上放的是个人博客，主要就是国内用用，实在是英文不怎么样。使用<a href="http://octopress.org/">octopress</a>搭建，其实就是静态网页。在这个前提下，那如果我们找一个支持静态网站的空间同步github，并且我们的域名支持智能DNS，那问题是不是很好解决。原来的gitcafe现在的<a href="https://coding.net/gitcafe.html">coding.net</a>就能很好的解决这个问题，而且他现在还支持jekyll。正好我的域名是用的<a href="https://wanwang.aliyun.com/?spm=5176.3047821.1.3.aV9BIt">万网</a>，支持智能DNS。</p>

<p>好了，废话说完，开始干活。</p>

<p>首先注册一个coding.net的账号，老路数了。接着建立一个跟账号用户名同名的仓库，例如
<code>https://git.coding.net/username/username.git</code></p>

<p>在terminal下打开原有octopress的地址（假定这个地址就是octopress，以后都是用这个地址为根目录），到octopress/_deploy目录下，添加coding.net的远程地址，并且新建分支。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress/_deploy
</span><span class='line'>git remote add coding https://git.coding.net/username/username.git
</span><span class='line'>git checkout -b coding-pages
</span><span class='line'>git checkout master
</span><span class='line'>git branch
</span><span class='line'>&gt;  coding-pages
</span><span class='line'>&gt;  * master
</span><span class='line'>git push coding master/coding-pages</span></code></pre></td></tr></table></div></figure>


<p>在coding.net的仓库里设置pages的分支</p>

<p><img src="http://7xtz1f.com2.z0.glb.clouddn.com/duel-github-cant-for-baiduspiders/11.png-shuiyinBlack" alt="set_coding_pages" /></p>

<p>保存了分支之后，打开<code>http://username.coding.me/username</code>就能看到我们的博客了。</p>

<p>接着去万网设置域名解析，将原来的github设置为海外，新加一个CNAME类型的记录为pages.coding.me设为默认。</p>

<p><img src="http://7xtz1f.com2.z0.glb.clouddn.com/duel-github-cant-for-baiduspiders/22.png-shuiyinBlack" alt="set_coding_pages" /></p>

<p>一般十分钟之内生效，生效后回到coding去设置<code>自定义域名</code>，输入刚才解析的二级域名，绑定完成。</p>

<p>告一段落，这个时候你ping自己的域名地址，同步到coding已经完成，会发现和原来的ip不一样了。</p>

<p>但是如果我们每次deploy之后，都要去手动再给coding提交一次，很麻烦，所以索性直接写到rakefile里去。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">multitask</span> <span class="ss">:push</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Deploying branch to Github Pages &quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Pulling any updates from Github Pages &quot;</span>
</span><span class='line'>  <span class="n">cd</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Bundler</span><span class="o">.</span><span class="n">with_clean_env</span> <span class="p">{</span> <span class="nb">system</span> <span class="s2">&quot;git pull origin </span><span class="si">#{</span><span class="n">deploy_branch</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="p">(</span><span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">/*&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">rm_rf</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="no">Rake</span><span class="o">::</span><span class="no">Task</span><span class="o">[</span><span class="ss">:copydot</span><span class="o">].</span><span class="n">invoke</span><span class="p">(</span><span class="n">public_dir</span><span class="p">,</span> <span class="n">deploy_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Copying </span><span class="si">#{</span><span class="n">public_dir</span><span class="si">}</span><span class="s2"> to </span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">cp_r</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">public_dir</span><span class="si">}</span><span class="s2">/.&quot;</span><span class="p">,</span> <span class="n">deploy_dir</span>
</span><span class='line'>  <span class="n">cd</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git checkout </span><span class="si">#{</span><span class="n">deploy_branch</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git add -A&quot;</span>
</span><span class='line'>    <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Site updated at </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Committing: </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;git commit -m </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Pushing generated </span><span class="si">#{</span><span class="n">deploy_dir</span><span class="si">}</span><span class="s2"> website&quot;</span>
</span><span class='line'>    <span class="no">Bundler</span><span class="o">.</span><span class="n">with_clean_env</span> <span class="p">{</span> <span class="nb">system</span> <span class="s2">&quot;git push origin </span><span class="si">#{</span><span class="n">deploy_branch</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## Github Pages deploy complete&quot;</span>
</span><span class='line'>    <span class="no">Bundler</span><span class="o">.</span><span class="n">with_clean_env</span> <span class="p">{</span> <span class="nb">system</span> <span class="s2">&quot;git push coding master:coding-pages&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">## coding.net Pages deploy complete&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以后运行<code>rake deploy</code>时，就会自动同步到coding里去了。</p>

<p>最后再说说百度抓取的事，本来到这里就应该结束了，但是百度好死不死的反应慢，就跟大家说说吧。在<a href="http://zhanzhang.baidu.com/crawltools/">站长工具</a>的抓取诊断测试一下，是否可以抓取成功，如果没有成功的话查看抓取状态下的抓取失败，如果网站IP和没有修改之前的一样，点击后面的报错，隔上大概半个小时再来试下，如果还是这样的话，在右下角的反馈中心反应一下，我是反应了才通过的。。。</p>

<p>百度链接提交的自动方式有三个：主动推送、自动推送、sitemap。
主动推送：我没怎么用，在工程底下建一个txt，将已有想提交的网页地址逐行写入，然后curl一下就好了，但是有条数限制，我是懒得搞这个了，想起来提一下，主要靠自动推送和sitemap。
自动推送：将百度提供的工具代码，放到一个合适的位置就好，然后每次打开网页的时候都会使用百度的push.js。我是放到了octopress/source/<em>includes/custom/footer.html里，大家可以参考。
sitemap：由于octopress已经require了 jekyll-sitemap，我们只需要保证</em>config.yml里的url是我们上面解析的二级域名就好，每次generate的时候会自动生成，提交之后在根目录就有一个sitemap.xml,将这个文件的地址提交给百度就好了，百度会不定时的去更新这个文件。</p>

<p>ok，大功告成</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随笔“南行“]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/02/21/to-south/"/>
    <updated>2017-02-21T15:19:29+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/02/21/to-south</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2017/02/21/to-south/">blog.bibitiger.cn/blog/2017/02/21/to-south/</a></h2>

<p></br></p>

<hr />

<p></br></p>

<h3>南行</h3>

<p><br></p>

<!--more-->


<p>单骑绝尘路</p>

<p>亭台挂玉珠</p>

<p>一剑江湖笑</p>

<p>再剑笑江湖</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[将已有octopress从github搬移到本地]]></title>
    <link href="http://blog.bibitiger.cn/blog/2017/02/21/pull-octopress-from-github/"/>
    <updated>2017-02-21T14:22:35+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2017/02/21/pull-octopress-from-github</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2017/02/21/pull-octopress-from-github/">blog.bibitiger.cn/blog/2017/02/21/pull-octopress-from-github/</a></h2>

<p></br></p>

<hr />

<p></br>
当我们换了电脑或者遗失了原本项目的时候，我们就需要将原来我们部署在github上的octopress博客重新搬移到本地。这里我们根据之前建立octopress项目的过程，首先清楚两个分支各自的功能：</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> source </th>
<th style="text-align:center;"> octopress文件及代码，假如我们的工程根目录为octopress，source对应的就是octopress </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> master </td>
<td style="text-align:center;"> octopress deploy时生成的缓存文件，可以认为是<em>deploy文件夹，对应于octopress/</em>deploy </td>
</tr>
</tbody>
</table>


<!--more-->


<p>所以我们需要下载的是octopress的内容文件代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone -b source git@github.com:username/username.github.com.git octopress</span></code></pre></td></tr></table></div></figure>


<p>接着下载发布预览内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>git clone git@github.com:username/username.github.com.git _deploy</span></code></pre></td></tr></table></div></figure>


<p>安装依赖项</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler # Install dependencies
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>由于我们是以前就建立好的工程，所以没有必要去运行<code>rake install</code>，如果运行的话，反而会冲掉我们之前设置好的theme。</p>

<p>现在就可以正式使用我们的工程了，可以先预览一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate  //生成
</span><span class='line'>rake preview   //预览</span></code></pre></td></tr></table></div></figure>


<p>这里我遇到了一个问题<code>=&gt; Creating Categories Tag Cloud
     Build Warning: Layout 'nil' requested in atom.xml does not exist.
                    done.</code>将octopress/source/atom.xml里的<code>layout: nil</code>改为<code>layout: null</code>即可。</p>

<p>之后新建博客发布之类的和原来的初建时一样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Batch和adb做App控制器]]></title>
    <link href="http://blog.bibitiger.cn/blog/2016/05/18/batchforadb/"/>
    <updated>2016-05-18T21:41:21+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2016/05/18/batchforadb</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2016/05/18/batchforadb/">blog.bibitiger.cn/blog/2016/05/18/batchforadb/</a></h2>

<p></br></p>

<hr />

<p></br>
最近要为我们的设备做一个windows桌面控制器。首先我们的设备是基于android系统的，说白了就是android系统里面只装了我们一个APP。由于我们的设备没有屏幕（我们自己去掉了，做智能硬件的应该了解，成本能省一点省一点），周期比较近的缘故没有时间做UI，于是突发奇想不如干脆就做个批处理脚本吧。为什么会有这样的想法呢？首先android的adb功能很强大，做过android自动化测试的应该知道现在主流的用到的pc和android通信的方式就两种，一种是socket，一种就是adb了，比如google的UIAutomator就是用adb dump出来布局文件，所以adb直接和pc通信应该是没有太大问题的；其次APP是我们自己写的，换言之就是说我们可以自定义intent，而不需要通过反射啊什么的很麻烦的手段就能产生交互。</p>

<!--more-->


<p>既然主意打定了，下一步就要开始干了，首先将Intent的命名，参数什么都订好，APP里面做好支持等等，这些业务相关的和APP本身的工作。我们已经确定了通过Intent给APP传输指令，那接下来的问题就是指令动作结束之后如何回告pc端动作结果。显然通过adb我们能够轻易的获取到log信息，而对log进行格式化按照我们的协议经行输出我们就可以简单的做到获取动作结果。下来就先看下怎么获取我们想要得到的log吧。</p>

<p>确定我们的pc上装有adb，判断下adb的版本就好了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'><span class="p">@</span>adb version <span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">if</span> <span class="nv">%errorlevel%</span> <span class="o">neq</span> <span class="m">0</span> (<span class="k">echo</span> adb 已存在)
</span></code></pre></td></tr></table></div></figure>


<p>如果想要查看adb的版本信息，使用for就可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'><span class="k">for</span> <span class="n">/f</span> <span class="s2">&quot;tokens=1* delims=:&quot;</span> <span class="nv">%%i</span> in (<span class="s1">&#39;adb version 2^&gt;nul&#39;</span>) <span class="k">do</span> <span class="k">set</span> <span class="nv">adb_version</span><span class="o">=</span><span class="nv">%%i</span>
</span><span class='line'><span class="k">echo</span> 当前adb版本为“<span class="nv">%adb_version%</span>”
</span></code></pre></td></tr></table></div></figure>


<p>如果没有安装adb的话，需要安装下，然后在环境变量里添加，要是想让脚本直接完成的话也是可以的，解压adb，在注册表里修改path就行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'>reg add <span class="s2">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment&quot;</span> <span class="n">/v</span> Path <span class="n">/t</span> REG_EXPAND_SZ <span class="n">/d</span> <span class="s2">&quot;%path%;%path_adb%&quot;</span> <span class="n">/f</span> <span class="m">1</span><span class="p">&gt;</span><span class="n">nul</span> <span class="m">2</span><span class="p">&gt;</span><span class="n">nul</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果我们连接着多个android设备的时候还要经行选择,我这里默认最多有10个设备</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'><span class="k">set</span> <span class="nv">device_num</span><span class="o">=</span><span class="m">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">/f</span> <span class="s2">&quot;tokens=1,2 delims=    &quot;</span> <span class="nv">%%j</span> in (<span class="s1">&#39;adb devices&#39;</span>) <span class="k">do</span> (
</span><span class='line'><span class="k">set</span> <span class="nv">device_</span>!device_num!<span class="o">=</span><span class="nv">%%j</span>
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> device_num+<span class="o">=</span><span class="m">1</span>
</span><span class='line'><span class="k">if</span> !device_num! <span class="o">GTR</span> <span class="m">10</span>
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> device_num-<span class="o">=</span><span class="m">1</span>
</span><span class='line'><span class="k">set</span> <span class="nv">chose_cmd</span><span class="o">=</span><span class="k">choice</span> <span class="n">/N</span> <span class="n">/c:</span>
</span><span class='line'><span class="k">if</span> <span class="nv">%device_num%</span><span class="o">==</span><span class="m">0</span> <span class="k">echo</span> 未找到可用设备 &amp;&amp; <span class="k">pause</span> &amp;&amp; exit
</span><span class='line'><span class="k">if</span> <span class="nv">%device_num%</span><span class="o">==</span><span class="m">1</span> ( <span class="k">set</span> <span class="n">/a</span> device_id_rem<span class="o">=</span><span class="m">1</span> ) <span class="k">else</span> (
</span><span class='line'><span class="k">echo</span> 设备列表：
</span><span class='line'><span class="k">for</span> <span class="n">/l</span> <span class="nv">%%i</span> in (<span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="nv">%device_num%</span>) <span class="k">do</span> <span class="k">echo</span> 设备[ <span class="nv">%%i</span> ]：!device_<span class="nv">%%i</span>! &amp;&amp; <span class="k">set</span> <span class="nv">chose_cmd</span><span class="o">=</span>!chose_cmd!<span class="nv">%%i</span>
</span><span class='line'><span class="k">echo</span> 请从上面列表中选择要操作的设备<span class="p">,</span>输入设备编号：
</span><span class='line'>!chose_cmd!
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> device_id_rem<span class="o">=</span>!<span class="k">errorlevel</span>!
</span><span class='line'>)
</span><span class='line'><span class="k">for</span> <span class="n">/f</span> <span class="s2">&quot;tokens=2,3 delims=_=&quot;</span> <span class="nv">%%i</span> in (<span class="s1">&#39;set device_&#39;</span>) <span class="k">do</span> (
</span><span class='line'><span class="k">if</span> <span class="nv">%%i</span><span class="o">==</span>!device_id_rem! <span class="k">set</span> <span class="nv">chose_device</span><span class="o">=</span>!device_<span class="nv">%%i</span>!)
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;当前使用设备是：!chose_device!&quot;</span>
</span><span class='line'><span class="k">echo</span>.
</span></code></pre></td></tr></table></div></figure>


<p>因为我们只要我们指定APP的log，所以在一开始的时候就将不是我们APP的log信息过滤掉，通过进程的pid就能搞定，先从我们的APP包名找到APP的pid</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'><span class="k">for</span> <span class="n">/f</span> <span class="s2">&quot;tokens=*&quot;</span> <span class="nv">%%i</span> in (<span class="s1">&#39;adb -s %chose_device% shell ps ^|find &quot;com.android.example&quot;&#39;</span>) <span class="k">do</span> (
</span><span class='line'><span class="k">set</span> <span class="nv">pid</span><span class="o">=</span><span class="nv">%%i</span>
</span><span class='line'><span class="k">set</span> <span class="nv">pid</span><span class="o">=</span>!pid:~<span class="m">10</span><span class="p">,</span><span class="m">5</span>!
</span><span class='line'>)
</span><span class='line'><span class="k">echo</span> 没找到APP，请检查APP是否开启 &amp;&amp; <span class="k">pause</span> &amp;&amp; exit
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> pid<span class="o">=</span><span class="nv">%pid%</span>+<span class="m">0</span> rem 这里拿到的pid本身是默认的字符串，转换为数字，下面做比较的时候方便使用
</span></code></pre></td></tr></table></div></figure>


<p>假如我们设定的log格式是这样的：[2016-03-15 13:42:10] ,E,tag,[ main: xx.java:5 xxx ], 0#0#0</p>

<table>
<thead>
<tr>
<th style="text-align:center;">[2016-03-15 13:42:10]</th>
<th style="text-align:center;"> E </th>
<th style="text-align:center;"> tag </th>
<th style="text-align:center;"> [ main: xx.java:5 xxx ] </th>
<th style="text-align:center;"> 0#0#0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">日期         </td>
<td style="text-align:center;"> 类型        </td>
<td style="text-align:center;"> 标签 </td>
<td style="text-align:center;"> 代码地址 </td>
<td style="text-align:center;"> 内容（arg1#arg2#arg3）</td>
</tr>
</tbody>
</table>


<p>第五列是真正的内容，那我们首先提取出第五列的内容，标签表示这个log是否是我们要的log</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'><span class="k">set</span> <span class="nv">app_out_tag</span><span class="o">=</span>test rem 设置我们想要的标签，例如这里设置为test
</span><span class='line'><span class="nl">:find_out_put</span>
</span><span class='line'><span class="k">set</span> <span class="nv">outtag</span><span class="o">=</span><span class="n">/\</span>  rem 等待进度条
</span><span class='line'><span class="k">echo</span> 等待执行结果：
</span><span class='line'><span class="nl">:find_out_put_entity</span>
</span><span class='line'><span class="k">set</span> <span class="n">/p=%outtag%&lt;nul</span>
</span><span class='line'><span class="k">set</span> <span class="nv">msg_num</span> <span class="o">=</span> <span class="m">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">/f</span> <span class="s2">&quot;tokens=3,4,5 delims=,&quot;</span> <span class="nv">%%i</span> in (<span class="s1">&#39;adb -s %chose_device% logcat -t 5000 ^|find &quot;%pid%&quot;&#39;</span>) <span class="k">do</span> (
</span><span class='line'><span class="k">set</span> <span class="nv">msg_return</span><span class="o">=</span><span class="nv">%%k</span> rem msg_return就是我们log里的内容
</span><span class='line'><span class="k">if</span> <span class="s2">&quot;%%i&quot;</span><span class="o">==</span><span class="s2">&quot;%app_out_tag%&quot;</span> <span class="k">echo</span>. &amp;&amp; <span class="k">goto</span> <span class="nl">due_with_result</span> rem 找到了对应的log，走入下一步，处理log的内容
</span><span class='line'><span class="k">set</span> <span class="n">/a</span> msg_num+<span class="o">=</span><span class="m">1</span>
</span><span class='line'>)
</span></code></pre></td></tr></table></div></figure>


<p>解析log的内容，找到每一个arg，就可以做业务相关的事情了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'><span class="nl">:due_with_result</span>
</span><span class='line'><span class="k">for</span> <span class="n">/f</span> <span class="s2">&quot;tokens=1,2,3 delims=:#&quot;</span> <span class="nv">%%a</span> in (<span class="s2">&quot;%msg_return%&quot;</span>) <span class="k">do</span> (
</span><span class='line'><span class="k">echo</span> arg<span class="m">1</span><span class="o">=</span><span class="nv">%%a</span>
</span><span class='line'><span class="k">echo</span> arg<span class="m">2</span><span class="o">=</span><span class="nv">%%b</span>
</span><span class='line'><span class="k">echo</span> arg<span class="m">3</span><span class="o">=</span><span class="nv">%%c</span>
</span><span class='line'><span class="k">echo</span> 想干什么就干吧
</span><span class='line'>)
</span></code></pre></td></tr></table></div></figure>


<p>现在我们就发一条Intent开始pc和APP的交流之旅吧,注意发送前清空下log缓存啊</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'>adb -s <span class="nv">%chose_device%</span> logcat -c
</span><span class='line'>adb -s <span class="nv">%chose_device%</span> shell am broadcast -a com.test.intent <span class="p">&gt;</span><span class="n">nul</span>
</span></code></pre></td></tr></table></div></figure>


<p>另：彩蛋两个</p>

<p>彩色字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'><span class="c">rem args:[1]:color string,不能包含 /\:*?&quot;&lt;&gt;|;[2]normol string;[3]color 参考 cmd color /?</span>
</span><span class='line'><span class="nl">:colorStrNewLine</span>
</span><span class='line'><span class="k">call</span><span class="nl">:colorStr</span> <span class="nv">%1</span> <span class="nv">%2</span> <span class="nv">%3</span>
</span><span class='line'><span class="k">echo</span>.
</span><span class='line'><span class="k">goto</span> <span class="nl">:eof</span>
</span><span class='line'>
</span><span class='line'><span class="c">rem args:[1]:color string,不能包含 /\:*?&quot;&lt;&gt;|;[2]normol string;[3]color 参考 cmd color /?</span>
</span><span class='line'><span class="nl">:colorStr</span>
</span><span class='line'><span class="k">set</span> <span class="n">/p=%2&lt;nul&gt;%1</span> <span class="m">2</span><span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'>
</span><span class='line'>findstr <span class="n">/a:%3</span> .* <span class="nv">%1</span>* <span class="m">2</span><span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">del</span> <span class="nv">%1</span>
</span><span class='line'><span class="k">goto</span> <span class="nl">:eof</span>
</span></code></pre></td></tr></table></div></figure>


<p>延时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='batch'><span class='line'><span class="c">rem args:[1]:seconds wait</span>
</span><span class='line'><span class="nl">:sleep</span>
</span><span class='line'><span class="k">choice</span> <span class="n">/N</span> <span class="n">/C</span> y <span class="n">/T</span> <span class="nv">%1</span> <span class="n">/D</span> y<span class="p">&gt;</span><span class="n">nul</span>
</span><span class='line'><span class="k">goto</span> <span class="nl">:eof</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[github Pages上部署octopress个人博客]]></title>
    <link href="http://blog.bibitiger.cn/blog/2016/05/13/makeupoctopress/"/>
    <updated>2016-05-13T17:03:53+08:00</updated>
    <id>http://blog.bibitiger.cn/blog/2016/05/13/makeupoctopress</id>
    <content type="html"><![CDATA[<h2>原文地址：<a href="http://blog.bibitiger.cn/blog/2016/05/13/makeupoctopress/">blog.bibitiger.cn/blog/2016/05/13/makeupoctopress/</a></h2>

<p><br/></p>

<hr />

<h3>引言</h3>

<p><a href="http://octopress.org/">Octopress</a>是什么？这在2.0的版本的说明上说的很清楚</p>

<blockquote><p>Octopress is a framework designed by Brandon Mathis for Jekyll, the blog aware static site generator powering Github Pages.</p></blockquote>

<p>这就是一个基于<a href="http://github.com/mojombo/jekyll">Jekyll</a>，用于布置在Github上的静态博客系统，号称(<strong><em>A blogging framework for hackers</em></strong>)</p>

<p>ok，闲话就先扯到这里，由于我的环境是mac，OS X Yosemite 10.10.5，所以windows和Ubuntu的童鞋们可以仅做参考，但是相关ruby和设置，html，css等相关修改都是一样的。</p>

<hr />

<!--more-->


<h3>几点基本概念</h3>

<p>Octopress和Jekyll还不清楚的，请自行google补脑</p>

<ol>
<li><a href="git-scm.com">Git</a>  版本管理控制系统，相关操作百度一大堆，之后会在本文使用中给出具体用到的命令，mac自带</li>
<li><a href="http://www.ruby-lang.org/en/downloads/">Ruby</a> Octopress实现用的语言，mac本身自带</li>
<li><a href="https://shopify.github.io/liquid/">Liquid</a> ruby模板语言，主要用于自定义渲染，Jeckyll就是基于这个模板的，如果要修改相关的渲染排版，了解下还是有必要的，Liquid语法可以查看<a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Designers">Liquid语法文档</a></li>
<li><a href="https://github.com/">Github</a> 版本管理系统，公开仓库免费，Github pages用于搭建个人技术博客</li>
<li><a href="http://www.rvm.io/">RVM</a> ruby版本管理工具</li>
<li><a href="rubygems.org/">RubyGems</a> ruby程序包(Gem)管理器，简单的想象的话就类似于apt-get</li>
<li><a href="www.gembundler.com/">Bundler</a> 管理Gem相依性工具，根据项目中的Gemfile和Gemfile.lock下载安装响应的依赖包</li>
<li><a href="http://rake.rubyforge.org/">Rake</a> 构建语言，根据项目中的Rakefile构建项目</li>
</ol>


<hr />

<h3>开始</h3>

<h4>安装ruby</h4>

<p>octopress要求ruby版本在1.9.3以上，首先我们要查看我们的ruby版本是多少</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby --version
</span><span class='line'>ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin14]</span></code></pre></td></tr></table></div></figure>


<p>如果小于1.9.3的话，那我们就需要更新ruby，rbven和RVM都可以更新下载ruby，这里我们使用RVM。
那首先安装RVM：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L https://get.rvm.io | bash -s stable --ruby</span></code></pre></td></tr></table></div></figure>


<p>安装可能需要一点时间，主要看网络，接下来查看RVM上的ruby版本都有哪些</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm list known
</span><span class='line'># MRI Rubies
</span><span class='line'>[ruby-]1.8.6[-p420]
</span><span class='line'>[ruby-]1.8.7[-head] # security released on head
</span><span class='line'>[ruby-]1.9.1[-p431]
</span><span class='line'>[ruby-]1.9.2[-p330]
</span><span class='line'>[ruby-]1.9.3[-p551]
</span><span class='line'>[ruby-]2.0.0[-p648]
</span><span class='line'>[ruby-]2.1[.8]
</span><span class='line'>[ruby-]2.2[.4]
</span><span class='line'>[ruby-]2.3[.0]</span></code></pre></td></tr></table></div></figure>


<p>最新版本已经到了2.3.0了，我是一个喜欢跟新的人，当然了大家可以根据自己的喜好选择1.9.3及以上版本都可以，如果以前就有ruby项目，需要配置gem环境，默认你们都是老鸟了，再此不多阐述。我装的2.3.0，直接上代码吧。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm install 2.3
</span><span class='line'>$ rvm list
</span><span class='line'>
</span><span class='line'>rvm rubies
</span><span class='line'>
</span><span class='line'>=* ruby-2.3.0 [ x86_64 ]
</span><span class='line'>
</span><span class='line'># =&gt; - current
</span><span class='line'># =* - current && default
</span><span class='line'>#  * - default
</span><span class='line'>$ rvm use 2.3.0</span></code></pre></td></tr></table></div></figure>


<p>将我们的rubygems也更新到最新</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm rubygems latest
</span><span class='line'>Installed rubygems 2.5.1 is newer than 2.4.8 provided with installed ruby, skipping installation, use --force to force installation.</span></code></pre></td></tr></table></div></figure>


<p>如果第一次使用gems的话，注意要将gems的源设成淘宝的镜像，墙的原因你懂得</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem sources --remove https://rubygems.org/
</span><span class='line'>$ gem sources -a https://ruby.taobao.org/
</span><span class='line'>$ gem sources -l
</span><span class='line'>*** CURRENT SOURCES ***
</span><span class='line'>
</span><span class='line'>https://ruby.taobao.org</span></code></pre></td></tr></table></div></figure>


<p>安装bundler</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>ok,ruby相关的安装就这些，下来我们开始安装octopress</p>

<h4>安装octopress</h4>

<p>mac自带git，所以如果没有git的话，自己先把git装好，这里就不说了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git://github.com/imathis/octopress.git octopress   //octopress为你想要将octopress部署的本地位置
</span><span class='line'>$ cd octopress/ </span></code></pre></td></tr></table></div></figure>


<p>下载安装octopress的依赖程序包，用到了bundler，可以打开octopress/Gemfile这个文件查看依赖包都是哪些，octopress/Gemfile.lock是bundler记录已经安装了版本的地方，只要两个工程的Gemfile.lock的版本一样就能保证两个工程的依赖包的相关版本都是一致的，用以保证我们工程环境的一致性，多人开发或者工程转移时比较关键。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install</span></code></pre></td></tr></table></div></figure>


<p>使用rake来build我们的octopress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake install</span></code></pre></td></tr></table></div></figure>


<p>通过查看Rakefile可以看到，rake都干了些什么。这里建议大家最好还是给octopress建立一个project，我用的编辑器是<a href="www.sublimetext.com/">Sublime Text2</a>。我们一起看下上一步具体都在做什么</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Initial setup for Octopress: copies the default theme into the path of Jekyll&#39;s generator. Rake install defaults to rake install[classic] to install a different theme run rake install[some_theme_name]&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:install</span><span class="p">,</span> <span class="ss">:theme</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span> <span class="o">||</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="s2">&quot;sass&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;A theme is already installed, proceeding will overwrite existing files. Are you sure?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># copy theme into working Jekyll directories</span>
</span><span class='line'>  <span class="n">theme</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">theme</span> <span class="o">||</span> <span class="s1">&#39;classic&#39;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;## Copying &quot;</span><span class="o">+</span><span class="n">theme</span><span class="o">+</span><span class="s2">&quot; theme into ./</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2"> and ./sass&quot;</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="n">source_dir</span>
</span><span class='line'>  <span class="n">cp_r</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">themes_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">theme</span><span class="si">}</span><span class="s2">/source/.&quot;</span><span class="p">,</span> <span class="n">source_dir</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="s2">&quot;sass&quot;</span>
</span><span class='line'>  <span class="n">cp_r</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">themes_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">theme</span><span class="si">}</span><span class="s2">/sass/.&quot;</span><span class="p">,</span> <span class="s2">&quot;sass&quot;</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="n">public_dir</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里其实是可以带一个参数的，这个参数指定一个我们希望用的主题<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>模板，如果没有指定的话系统自动使用classic主题，我们没有指定主题，所以这里直接使用默认的。
接着拷贝该主题文件夹下的source和sass文件夹内容到octopress的source和sass文件夹，并且创建_posts和public文件夹。</p>

<p>修改_config.yml文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">title</span><span class="p">:</span> <span class="n">bibitiger</span><span class="err">的博客</span>  <span class="sr">//</span><span class="err">博客名称，修改成你自己的</span><span class="p">,</span><span class="err">下同</span>
</span><span class='line'><span class="ss">subtitle</span><span class="p">:</span> <span class="err">把酒言欢</span><span class="o">.</span>     <span class="sr">//</span><span class="err">博客副标题</span>
</span><span class='line'><span class="ss">author</span><span class="p">:</span> <span class="n">bibitiger</span>      <span class="sr">//</span><span class="err">作者</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成博客</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">generate</span>
</span></code></pre></td></tr></table></div></figure>


<p>本地预览</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">preview</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在可以打开浏览器，在<em>&ldquo;localhost:4000&rdquo;</em>预览我们的博客了</p>

<h4>安装主题</h4>

<p>我使用的是<a href="https://github.com/allenhsu/greyshade.git">Greyshade</a>,按照下面的操作就可以简单的安装和部署了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="nb">clone</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:allenhsu</span><span class="o">/</span><span class="n">greyshade</span><span class="o">.</span><span class="n">git</span> <span class="o">.</span><span class="n">themes</span><span class="o">/</span><span class="n">greyshade</span>
</span><span class='line'><span class="err">$</span> <span class="n">echo</span> <span class="s2">&quot;\$greyshade: color;&quot;</span> <span class="o">&gt;&gt;</span> <span class="n">sass</span><span class="o">/</span><span class="n">custom</span><span class="o">/</span><span class="n">_colors</span><span class="o">.</span><span class="n">scss</span> <span class="sr">//</span><span class="no">Substitue</span> <span class="s1">&#39;color&#39;</span> <span class="n">with</span> <span class="n">your</span> <span class="n">highlight</span> <span class="n">color</span>
</span><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">install</span><span class="o">[</span><span class="s2">&quot;greyshade&quot;</span><span class="o">]</span>
</span><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">generate</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样我们可以使用<em>“rake preview”</em>来预览</p>

<p>设置头像，头像设置是在octopress/source/_includes/header.html里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;{{ root_url }}/javascripts/md5.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;&lt;img src=&#39;http://www.gravatar.com/avatar/&quot;</span> <span class="o">+</span> <span class="nx">MD5</span><span class="p">(</span><span class="s2">&quot;{{ site.email | downcase }}&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;?s=160&#39; alt=&#39;Profile Picture&#39; style=&#39;width: 160px;&#39; /&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>说两种方法</p>

<ul>
<li>一种就是将图片放置到图床<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>上,替换上面代码中的<strong><em>src</em></strong>的内容</li>
<li>还有一种就是本地存放，将头像放到octopress/source/images/中，将<strong><em>src</em></strong>的内容替换成<strong><em>“/images/yours.png”</em></strong></li>
</ul>


<p>如果想更好的话就是把这段代码全部替换成一个<strong><em>img</em></strong>的代码，因为我们不需要脚本帮我们组合图片地址，更不需要计算md5码</p>

<p>设置微博的话，我们只需要把下面的代码加入到_config.yml最下方就好了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>weibo_user: baronny # 微博数字 ID 或域名 ID
</span><span class='line'>weibo_share: true # 是否开启微博分享按钮
</span></code></pre></td></tr></table></div></figure>


<p>微博域名一般就在这里：<strong><em>微博->个人->设置->个性域名</em></strong>，例如：<code>http://weibo.com.yours</code>，"yours"就是你的域名ID</p>

<p>现在我们就能预览到带有我们头像和信息、微博的微博了，下来我们写第一篇博文吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>$ rake new_post[&quot;your_post&quot;]  //your_post是你的博文名
</span></code></pre></td></tr></table></div></figure>


<p>自动生成的博文在octopress/source/_posts里，文件名以当前时间和你输入的博文名组成，例如：<strong><em>“2016-05-13-your-post.markdown”</em></strong>。
现在就可以开始写第一篇博文了</p>

<p>但是我们发现预览的速度很慢，这是由于模板和主题有使用google，Twitter等相关内容，墙的原因。。。</p>

<p>首先将_config.yml里有关google和Twitter的东西都注释掉。然后将所有文件里引用到google公共库的地方都换成国内镜像<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>
,<strong><em>“ajax.googleapis.com/ajax/libs/”</em></strong>和<strong><em>“fonts.useso.com/css?”</em></strong></p>

<p>将<strong><em>“octopress/source/_includes/custom/navigation.html”</em></strong>里面的内容修改成你想要的，类似于这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/&quot;</span><span class="nt">&gt;</span>首页<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}/blog/archives&quot;</span><span class="nt">&gt;</span>全部文章<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>侧边栏显示<strong><em>最新文章</em></strong>在<strong><em>“octopress/source/_includes/asides/”</em></strong>添加<strong><em>“recent_post.html”</em></strong>文件，在里面加入如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>          <span class="nt">&lt;h2&gt;</span>最新文章<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>          <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;recent_posts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {% for post in site.posts limit: site.recent_posts %}
</span><span class='line'>          <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{ root_url }}{{ post.url }}&quot;</span><span class="nt">&gt;</span>{% if site.titlecase %}{{ post.title | titlecase }}{% else %}{{ post.title }}{% endif %}<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      {% endfor %}
</span><span class='line'>          <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>在<strong><em>octopress/source/_includes/header.html</em></strong>最下方加入代码</p>

<p><code>{% include asides/recent_posts.html %}</code></p>

<p>并且把<strong><em>octopress/source/_includes/custom/header.html</em></strong>里面的代码都删除</p>

<p>在<strong><em>_config.yml</em></strong>修改<strong><em>“ecent_posts: 2”</em></strong>可以更改最新文章显示的最多条数</p>

<p>侧边栏显示<strong><em>分类</em></strong>，创建<strong><em>“octopress/plugins/category_list.rb”</em></strong>文件，在里面加入如下代码</p>

<pre><code># encoding: utf-8
module Jekyll

class Site

def create_category_list
  write_to_tag_cloud if @config['category_tag_cloud']
  # write_to_sidebar if @config['category_sidebar']
end

private
# generate category tag list and write to 'source/_includes/asides/categories_tag.html'
def write_to_tag_cloud
  puts ' =&gt; Creating Categories Tag Cloud'
  lists = {}
  max, min = 1, 1
  self.categories.keys.sort_by{ |str| str.downcase }.each do |category|
    count = self.categories[category].count
    lists[category] = count
    max = count if count &gt; max
  end

  html = ''
  lists.each do | category, counter |
    url = get_category_url category
    if counter &lt; 20
      setfontsize = 20
    else
      setfontsize = 80 * (Float(counter)/max)
    end

    setfontsize = 20 if setfontsize &lt; 20
    style = "font-size: #{80 + setfontsize}%"
    if @config['category_counter']
      html &lt;&lt; " &lt;a href='#{url}' style='#{style}'&gt;#{category.capitalize}(#{self.categories[category].count})&lt;/a&gt; "
    else
      html &lt;&lt; " &lt;a href='#{url}' style='#{style}'&gt;#{category.capitalize}&lt;/a&gt; "
    end
  end

  File.open(File.join(@source, '_includes/asides/categories_tag.html'), 'w') do |file|
    file &lt;&lt; """{% if site.category_tag_cloud %}
&lt;section&gt;
&lt;h2&gt;#{@config['category_title'] || 'Categories'}&lt;/h2&gt;
&lt;span class='categories_tag'&gt;#{html}&lt;/span&gt;
&lt;/section&gt;
{% endif %}
"""
  end
end

# generate category lists and write to 'source/_includes/asides/categories_sidebar.html'
def write_to_sidebar
  puts ' =&gt; Creating Categories Sidebar'
  html = "&lt;ul&gt;\n"
  # case insensitive sorting
  @categories.keys.sort_by{ |str| str.downcase }.each do |category|
    url = get_category_url category
    if @config['category_counter']
      html &lt;&lt; "  &lt;li&gt;&lt;a href='#{url}'&gt;#{category.capitalize} (#{@categories[category].count})&lt;/a&gt;&lt;/li&gt;\n"
    else
      html &lt;&lt; "  &lt;li&gt;&lt;a href='#{url}'&gt;#{category.capitalize}&lt;/a&gt;&lt;/li&gt;\n"
    end
  end
  html &lt;&lt; "&lt;/ul&gt;"
  File.open(File.join(@source, '_includes/asides/categories_sidebar.html'), 'w') do |file|
    file &lt;&lt; """{% if site.category_sidebar %}
&lt;section&gt;
&lt;h1&gt;#{@config['category_title'] || 'Categories'}&lt;/h1&gt;
#{html}
&lt;/section&gt;
{% endif %}
"""
  end
end

def get_category_url(category)
  dir = @config['category_dir'] || 'categories'
  File.join @config['root'], dir, category.to_url
end
end

class CategoryList &lt; Generator
safe true
priority :low

def generate(site)
  puts "CategoryList begin genrate"
  if site.config['category_list']
    puts "## Generating Categories.."
    site.create_category_list
  end
end
end

end
</code></pre>

<p>创建<strong><em>octopress/source/_includes/asides/categories_tag.html</em></strong>文件，并写入如下代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% if site.category_tag_cloud %}
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>分類<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>在<strong><em>_config.tml</em></strong>里面加入下方代码</p>

<pre><code># ----------------------- #
#    Categories           #
# ----------------------- #
# create categories page
category_list: true
# use counter after categories
category_counter: true
# category title
category_title: 分類
# create an include categories list in @source/_includes/asides/categories_sidebar.html
# and don't forget to add 'asides/categories_sidebar.html' into @default_asides if you want to enable it.
category_sidebar: true
# create an include categories tag cloud page in @source/_includes/asides/categories_tag.html
# and don't forget to add 'asides/categories_tag.html' to @default_asides if you want to enable it.
category_tag_cloud: true
</code></pre>

<p>在<strong><em>octopress/source/_includes/header.html</em></strong>最下方加入代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% include asides/categories_tag.html %}
</span></code></pre></td></tr></table></div></figure>


<p>如果想首页文章不全部显示的话，在想要截止显示的位置加入</p>

<pre><code>&lt;!--more--&gt;
</code></pre>

<h4>布置到github</h4>

<p>首先你需要将你本机的ssh绑定到github上，<a href="https://help.github.com/articles/generating-an-ssh-key/">GithubHelp</a>有详细说明，参照这个就好了。</p>

<p>创建一个自己的仓库，名称为yours.github.com</p>

<p>输入下面命令：</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>用来绑定你刚才创建的仓库，要求输入的时候输入你的仓库地址就好了，例如：<del><a href="https://github.com/yours/yours.github.com.git">https://github.com/yours/yours.github.com.git</a></del></p>

<p>输入以下命令部署：</p>

<pre><code>rake generate   //生成
reke deploy     //提交部署
</code></pre>

<p>不要忘了前面说的命令：<code>rake preview</code>可以先本地预览下</p>

<p>source文件夹要单独提交，以防以后迁移使用，使用下方代码就好，放到source分支</p>

<pre><code>git add .
git commit -m "commit source"
git push origin source
</code></pre>

<p>大功告成，在浏览器里查看<code>yours.github.com</code>就可以看到我们刚刚创建的博客了</p>

<h4>绑定自己的域名</h4>

<p>如果没有域名的话，想要一个玩玩的话，推荐去<a href="https://wanwang.aliyun.com/domain/cn/?spm=5176.8006371.237031.157.ePk79f">万网</a>,很快就可以申请好，并且几分钟就可以解析完成。不过要是中国区的域名需要实名审核，一般两天内。</p>

<p>域名有了的话，创建一个CNAME的二级域名，并解析，对应到你的github仓库地址，延续上面的话应该是：yours.github.io</p>

<p>创建<strong><em>“octopress/source/CNAME”</em></strong>文件，并向里面写入你刚刚创建的CNAME二级域名，例如：<code>blog.yours.com</code>，不要带<code>http://</code>或者<code>https://</code>之类的。</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>提交成功后，等待十分钟左右，打开网页要是能看见我们自己的博客就大工搞成！！！</p>

<h4>octopress结构</h4>

<pre><code>├─ config.rb  #指定额外的compass插件
├─ config.ru  
├─ Rakefile   #rake的配置文件,类似于makefile
├─ Gemfile    #bundle要下载需要的gem依赖关系的指定文件
├─ Gemfile.lock  #这些gem依赖的对应关系,比如A的x本依赖于B的y版本
├─ _config.yml   #站点的配置文件
├─ public/    #在静态编译完成后的目录,网站只需要这个目录下的文件树
├─ _deploy/   #deploy时候生成的缓存文件夹,和public目录一样
├─ sass/      #css文件的源文件,过程中会compass成css
├─ plugins/   #放置自带以及第三方插件的目录,ruby程序
│  └── xxx.rb
└─ source/    #站点的源文件目录,public目录就是根据这个目录下数据生成的
    └─ _includes/
      └─ custom/      #自定义的模板目录,被相应上级html include
         └─ asides/   #边栏模板自定义模板目录
      └─ asides/      #边栏模板目录
      └─ post/        #文章页面相应模板目录
   └─ _layouts/       #默认网站html相关文件,最底层
   └─ _posts/         #新增以及从其它程序迁移过来的数据都存在这里
   └─ stylesheets/    #css文件目录
   └─ javascripts/    #js文件目录
   └─ images/         #图片目录
</code></pre>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>octopress的主题放置在octopress/.themes/<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>我图床用的是<a href="www.qiniu.com/">七牛云存储</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://cdn.code.baidu.com/">百度静态镜像</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
